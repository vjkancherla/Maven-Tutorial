================================
CONVENTION OVER CONFIGURATION
================================

- "Maven's Convention over Configuration" is a principle that emphasizes the use of sensible defaults and predefined project 
  structures and configurations to simplify the build and development process.

- It encourages developers to follow a set of conventions rather than requiring extensive configuration for every aspect of the build

Here are some key aspects of Maven's Convention over Configuration:

    - Standardized Project Structure:
        Maven enforces a standardized project structure. By adhering to this structure, developers can minimize the need for 
        configuration. For example, Java source code should be placed in the src/main/java directory, while test code goes in 
        src/test/java. Resources like configuration files and properties should be placed in the src/main/resources directory.

    - POM as the Project Blueprint: 
        The Project Object Model (POM), defined in the pom.xml file, serves as the blueprint for the project. It includes essential 
        information about the project, such as its dependencies, plugins, and goals. Many configuration details are inferred from 
        the POM, reducing the need for explicit configuration.

    - Dependency Management:
         Maven encourages developers to define project dependencies in the POM file using a standardized format. The convention is 
         to specify dependencies using the <dependencies> section in the POM. Maven can then automatically resolve, download, and 
         manage these dependencies, reducing the need for manual configuration.

    - Build Output: 
        Maven conventionally places build output (e.g., compiled classes, JAR files, and WAR files) in predefined directories 
        within the project structure. For instance, compiled classes go into the target directory, making it easier to locate 
        build artifacts.

    - Transitive Dependency Resolution: 
        Maven's convention over configuration extends to dependency management. When you declare a dependency, Maven automatically 
        resolves and fetches its transitive dependencies, simplifying the process of managing complex dependency trees.