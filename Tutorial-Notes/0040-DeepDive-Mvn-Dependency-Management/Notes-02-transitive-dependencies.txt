===================================
MAVEN AND TRANSITIVE DEPENDENCIES 
====================================

READ THIS: https://reflectoring.io/maven-bom/

Let’s see in detail how Maven deals with transitive dependencies in a project.

As an example, we’ll look at two dependencies from the Spring Framework: spring-context and spring-security-web.

In the pom.xml file we add them as direct dependencies, DELIBERATELY SELECTING TWO DIFFERENT VERSION NUMBERS:

    ----
    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.3.5</version> <----- NOTE THIS VERSION
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>5.4.5</version> <------ NOTE THIS VERSION
        </dependency>
    </dependencies>
    ----


Visualize Version Conflicts with a Dependency Tree
-----------------------------------------------------
We can list all the dependencies including the transitive ones using this command:

>> mvn dependency:tree -Dverbose=true

-----
+- org.springframework:spring-context:jar:5.3.5:compile
|  +- org.springframework:spring-aop:jar:5.3.5:compile
|  |  +- (org.springframework:spring-beans:jar:5.3.5:compile - omitted for duplicate)
|  |  \- (org.springframework:spring-core:jar:5.3.5:compile - omitted for duplicate)
|  +- org.springframework:spring-beans:jar:5.3.5:compile
|  |  \- (org.springframework:spring-core:jar:5.3.5:compile - omitted for duplicate)
...
   +- (org.springframework:spring-expression:jar:5.2.13.RELEASE:compile - omitted for conflict with 5.3.5)
   \- org.springframework:spring-web:jar:5.2.13.RELEASE:compile
      +- (org.springframework:spring-beans:jar:5.2.13.RELEASE:compile - omitted for conflict with 5.3.5)
      \- (org.springframework:spring-core:jar:5.2.13.RELEASE:compile - omitted for conflict with 5.3.5)
-----

We started from two dependencies, and in this output, we find out that Maven pulled additional dependencies. 
These additional dependencies are simply transitive.

We can see that there are different versions of the same dependency in the tree. 
For example, there are two versions of the spring-beans dependency:5.2.13.RELEASE and 5.3.5.

***Maven has resolved this version conflict, but how? What does omitted for duplicate and omitted for conflict mean?***


How Does Maven Resolve Version Conflicts?
---------------------------------------------
- The first thing to know is that Maven can’t sort versions: The versions are arbitrary strings and may not follow a strict semantic sequence.

- For example, if we have two versions 1.2 and 1.11, we know that 1.11 comes after 1.2 but the String comparison gives 1.11 before 1.2. 
  Other version values can be 1.1-rc1 or 1.1-FINAL, that’s why sorting versions by Maven is not a solution.

- That means that Maven doesn’t know which version is newer or older and cannot choose to always take the newest version.

The Version Resolution Process
    - Maven takes the approach of the nearest transitive dependency in the tree depth and the first in resolution.

    - To understand this, let’s look at an example: 
      We start with a POM file having some dependencies with transitive dependencies 
      (to make it short, all the dependencies will be represented by the letter D):

        D1(v1) -> D11(v11) -> D12(v12) -> DT(v1.3)
        D2(v2) -> DT(v1.2)
        D3(v3) -> D31(v31) -> DT(v1.0)
        D4(v4) -> DT(v1.5)

      NOTE that each of the direct dependencies pulls in a different version of the "DT" dependency.

      Maven will create a dependency tree and following the criteria mentioned above, a dependency will be selected for "DT":

      [1] Dependency tree: D1(v1) -> D11(v11) -> D12(v12) -> **DT(v1.3)**  
          Is Dependency selected?  DT(v1.3) is omitted as is not nearst in depth

      [2] Dependency tree: D2(v2) -> **DT(v1.2)** 
          Is Dependency selected? DT(v1.2) is selected as its nearst in depth and first in order of resolution

      [3] Dependency tree: D3(v3) -> D31(v31) -> **DT(v1.0)**
          Is Dependency selected? DT(v1.0) is omitted as is not nearst in depth

      [4] Dependency tree: D4(v4) -> **DT(v1.5)**
          Is Dependency selected? DT(v1.5) is omitted as its not first in order of resolution

      NOTES:
        - the resolution order played a major role in choosing the DT dependency since the v1.2 and v1.5 had the same depth,
          but v1.2 came first in the resolution order.
        - if we wanted to use version v1.5 in this case, we could simply add the dependency D4 before D2 in our POM file.


Overriding Transitive Dependency Versions
-------------------------------------------
[Option-1] Override a Transitive Dependency Version Using a Direct Dependency
    - Adding the desired transitive dependency version as a direct dependency in the POM file will result in making it the nearest in depth. 
      This way Maven will select this version. 
    - In this example: D1(v1) -> D11(v11) -> D12(v12) -> DT(v1.3) 
      if we wanted version v1.3 to be selected, then adding the dependency DT(v1.3) in the POM file will ensure its selection.


[Option-2] Override a Transitive Dependency Version Using the dependencyManagement Section
    - Using dependencyManagement we can override the version and select the version that we want. 
      All that we have to do is to add the following to our POM file:

      =====
      <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-beans</artifactId>
                    <version>5.2.13.RELEASE</version>
                </dependency>
            </dependencies>
        </dependencyManagement
      =====







