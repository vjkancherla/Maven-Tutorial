====================
DEPENDENCY SCOPES
====================
- Maven dependency scopes determine the visibility of a dependency with respect to various stages of the build lifecycle and in different contexts. 

- The scope of a dependency dictates which classpath(s) it will be available on, as well as when and if it should be packaged/transitive.

Here's a breakdown of the main dependency scopes in Maven:

[1] Compile (default):
Description: This is the default scope if none is specified. Dependencies with this scope are available in all classpaths.
Transitivity: Dependencies with compile scope are transitive in dependent projects.
Usage: Useful for general libraries/APIs that are needed to build, test, and run the project.
EXAMPLE:
    ----
    <dependency>
        <groupId>commons-lang</groupId>
        <artifactId>commons-lang</artifactId>
        <version>2.6</version>
    </dependency>
    ----

[2] Provided:
Description: This scope indicates that the dependency is provided by the JDK or a container during runtime, 
    hence it should not be included in the project's package.
Transitivity: Dependencies with provided scope are non-transitive.
Usage: Commonly used for dependencies that are provided at runtime by the environment. For instance, servlet API 
    libraries in web applications, where the web container (like Tomcat) already provides the library.
EXAMPLE:
    ----
    <dependency>
        <groupId>jakarta.servlet</groupId>
        <artifactId>jakarta.servlet-api</artifactId>
        <version>6.0.0</version>
        <scope>provided</scope>
    </dependency>
    ----

[3] Runtime:
Description: The dependency is not needed for compilation but is required during execution.
Transitivity: Dependencies with runtime scope are transitive in dependent projects.
Usage: Useful for libraries that are used only at runtime, like JDBC drivers.
EXAMPLE:
    ----
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>8.0.28</version>
        <scope>runtime</scope>
    </dependency>
    ----

[4] Test:
Description: The dependency is available only for the test compilation and execution phases.
Transitivity: Dependencies with test scope are non-transitive.
Usage: This is used for unit testing libraries like JUnit, Mockito, etc. These dependencies are needed to compile and run tests, 
    but they aren't needed at runtime in a normal execution scenario.
EXAMPLE:
    ----
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
        <scope>test</scope>
    </dependency>
    ----

[5] System:
Description: Similar to provided scope, but you must also specify the JAR which contains it. 
    Maven does not fetch this dependency from a repository; instead, it's taken from a local path.
Transitivity: Dependencies with system scope are non-transitive.
Usage: This scope is discouraged and is not recommended because it relies on local files, making builds non-portable.
EXAMPLE:
    ----
    <dependency>
        <groupId>com.baeldung</groupId>
        <artifactId>custom-dependency</artifactId>
        <version>1.3.2</version>
        <scope>system</scope>
        <systemPath>${project.basedir}/libs/custom-dependency-1.3.2.jar</systemPath>
    </dependency>
    ----

[6] Import:
Description: This scope is only used in a <dependencyManagement> section and indicates that the specified POM should be 
    replaced with the dependencies declared in that POM's <dependencyManagement> section.
Transitivity: This is not applicable since it only affects the importing of dependencies from other POMs.
Usage: Used in scenarios with a "Bill of Materials" (BOM) where you want to centralize dependency versions.
EXAMPLE:
    ----
    <dependencyManagement>
        <dependency>
            <groupId>com.baeldung</groupId>
            <artifactId>custom-project</artifactId>
            <version>1.3.2</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencyManagement>
    ----
    Here, below custom-project dependency will be replaced with all dependencies declared in custom-projectâ€™s pom.xml <dependencyManagement> section.